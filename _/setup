#!/bin/bash

# options
showHelp() {
  echo "This script is a full blown setup manager for archlinux"
  echo
  echo "Syntax: setup [options][arguments]"
  echo "options:"
  echo "-h    Show this help message"
  echo "-l    update the linker script on every submodule (can be dangerous)"
  echo "-c    Choose a specific host configuration (ex: laptop, desktop...) to link all packages"
  echo "-n    Create a new submodule interactively, automatically make the necessary commits"
}

updateLink() {
  git -C "$PARENT_DIR" submodule update --init
  for dir in $PARENT_DIR/*/ # trailing / character to only include directories
  do
    dir=${dir%*/} # remove trailing / character
    if [ $dir != "$PARENT_DIR/_" ]; then # exclude config "_" directory
      \cp -f "$SCRIPT_DIR/link" $dir
      if [ $? -eq 0 ]; then
        echo "Updated link script in $dir"
      else
        echo "Error: The link script update failed for $dir"
        exit
      fi
      git -C "$dir" add . &> /dev/null
      git -C "$dir" commit -m "Updated link script" &> /dev/null
      git -C "$dir" push origin HEAD:main &> /dev/null
    fi
  done
  git -C "$PARENT_DIR" add . &> /dev/null
  git -C "$PARENT_DIR" commit -m "Updated link scripts" &> /dev/null
  git -C "$PARENT_DIR" push &> /dev/null
  git -C "$PARENT_DIR" submodule update --remote --merge
}

useLinkerScripts() {
  # Check if the 'stow' command exists
  if ! command -v stow &> /dev/null; then
    echo "Error: 'stow' command not found. Please install GNU Stow."
    exit 1
  fi

  export XDG_CONFIG_HOME=$HOME/.config
  export XDG_DATA_HOME=$HOME/.local

  case $host in
    "desktop" | "laptop" ) # check for configured hosts
    ./configurations $PARENT_DIR $host
    if [ $? -eq 1 ]; then
      echo "Error: Could not link some packages. Maybe check environment variables ?"
      exit 1
    fi
    echo "Linked all packages successfully";;
    *) # error out if argument did not match any know hosts
      echo "Error: No configured host was provided"
      exit 1;;
  esac
}

createSubmodule() {
  # Check if the `gh` command exists
  if ! command -v gh &> /dev/null; then
    echo "Error: 'gh' command not found. Please install the GitHub CLI."
    exit 1
  fi

  # these environment variables might be required
  export XDG_CONFIG_HOME=$HOME/.config
  export XDG_DATA_HOME=$HOME/.local

  # get the necessary information from the user
  read -p "Please provide your github account username: " githubUsername
  read -p "Please enter the name of the submodule: " submoduleName
  echo "Please enter a target for the files in the submodule. The target may contain environment variables, but no relative paths"
  read -p "Target: " submoduleTarget

  # create the submodule's remote repository.
  gh repo create "$submoduleName" -d "$submoduleDescription" --public
  echo
  if [ $? -eq 1 ]; then
    echo "Error: Could not create the remote repository. Are you connected to GitHub ?"
    exit 1
  fi

  # Cloning in /tmp then adding the necessary files
  temporarySubmodule=/tmp/temporary_submodule
  rm -rf $temporarySubmodule
  gh repo clone $submoduleName $temporarySubmodule
  if [ $? -eq 1 ]; then
    echo "Error: Could not clone the submodule repository. Does /tmp exist and do you have write permissions for it ?"
    exit 1
  fi
  echo "Successfully cloned $submoduleName in $temporarySubmodule"
  echo "$submoduleTarget" > $temporarySubmodule/target.txt
  \cp ./link $temporarySubmodule/
  echo "# $submoduleName" > $temporarySubmodule/README.md
  echo "$submoduleDescription" >> $temporarySubmodule/README.md
  git -C $temporarySubmodule add .
  git -C $temporarySubmodule commit -m "submodule initalization"
  git -C $temporarySubmodule push -u origin main
  if [ $? -eq 1 ]; then
    exit 1
  fi
  rm -rf $temporarySubmodule

  # finally adding the newly created repository as a submodule
  submoduleURL="https://github.com/$githubUsername/$submoduleName.git"
  git -C "$PARENT_DIR" submodule add $submoduleURL
  git -C "$PARENT_DIR" add .
  git -C "$PARENT_DIR" commit -m "Added new $submoduleName submodule"
  git -C "$PARENT_DIR" push
  if [ $? -eq 1 ]; then
    exit 1
  fi

  # update submodules to the latest commits, including the new one
  git -C "$PARENT_DIR" submodule update --init --remote --merge
  echo
  echo "Successfully added the $submoduleName submodule - Updated all submodules to the latest commit"
}

# get the path to the script and the main directory (above the script)
SCRIPT_DIR=$(dirname "$(realpath "$0")")
PARENT_DIR=$(dirname "$SCRIPT_DIR")

# set variables
host=""

# read the options
while getopts ":h:lc:n" option; do
  case $option in
    h) # display help
      showHelp
      exit 0;;
    l) # update link scripts in all directories
      updateLink
      exit 0;;
    c) # choose configuration
      host=$OPTARG
      if [ -n "$host" ]; then
        useLinkerScripts
      fi
      exit 0;;
    n) # create submodule
      createSubmodule
      exit 0;;
    \?) # invalid option
      echo "Error: Invalid option"
      exit 1;;
  esac
done

# show help if no options have been passed in
showHelp
exit 1;
